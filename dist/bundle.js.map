{"version":3,"sources":["webpack:///webpack/bootstrap 6067924156974c300636","webpack:///./src/classes/Board.js","webpack:///./src/classes/Player.js","webpack:///./src/style.scss?cd84","webpack:///./src/index.js"],"names":["Board","state","every","cell","symbol","position","moves","forEach","index","push","isEmpty","isFull","Player","max_depth","nodes_map","Map","board","alpha","beta","maximizing","callback","depth","constructor","name","TRACE","window","trace_ttt","clear","isTerminal","winner","console_styles","turn_and_available_moves","exploring_parent","exploring_child","parent_heuristic","child_heuristic","all_moves","best_move","p","console","log","getAvailableMoves","join","printFormattedBoard","best","avail","loopvar1","length","child","slice","insert","styles","node_value","getBestMove","Math","max","has","get","set","arr","split","rand","floor","random","ret","value","avail2","loopvar2","min","hasClass","el","className","classList","contains","match","RegExp","addClass","add","removeClass","remove","reg","replace","drawWinningLine","direction","row","document","getElementById","setTimeout","newGame","starting_player","parseInt","b","innerHTML","html_cells","children","starting","player_turn","addEventListener","event","target","tagName","depth_choices","choice","dataset","starting_player_choices"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6067924156974c300636","/**\r\n  * @desc This class represents the board, contains methods that checks board state, insert a symbol, etc..\r\n  * @param {Array} state - an array representing the state of the board\r\n*/\r\nclass Board {\r\n    //Initializing the board\r\n    constructor(state = ['','','','','','','','','']) {\r\n        this.state = state;\r\n    }\r\n    \r\n    //Checks if board has no symbols yet\r\n    isEmpty()\r\n    {\r\n        return this.state.every(cell => !cell);\r\n    }\r\n\r\n    //Check if board has no spaces available\r\n\r\n    isFull()\r\n    {\r\n        return this.state.every(cell => cell);\r\n    }\r\n\r\n    /**\r\n     * Inserts a new symbol(x,o) into\r\n     * @param {String} symbol \r\n     * @param {Number} position\r\n     * @return {Boolean} boolean represent success of the operation\r\n     */\r\n    insert(symbol, position) {\r\n        if(position > 8 || this.state[position]) return false; //Cell is either occupied or does not exist\r\n        this.state[position] = symbol;\r\n        return true;\r\n    }\r\n\r\n    //Returns an array containing available moves for the current state\r\n\r\n    getAvailableMoves()\r\n    {\r\n        const moves = [];\r\n        this.state.forEach((cell, index) => {\r\n            if(!cell) moves.push(index); \r\n        });\r\n        return moves;\r\n    }\r\n\r\n    /**\r\n     * Checks if the board has a terminal state ie. a player wins or the board is full with no winner\r\n     * @return {Object} an object containing the winner, direction of winning and row number\r\n     */\r\n     \r\n    isTerminal() {\r\n        //Return False if board in empty\r\n        if(this.isEmpty()) return false;\r\n\r\n        //Checking Horizontal Wins\r\n        if(this.state[0] == this.state[1] && this.state[0] == this.state[2] && this.state[0]) {\r\n            return {'winner': this.state[0], 'direction': 'H', 'row': 1};\r\n        }\r\n        if(this.state[3] == this.state[4] && this.state[3] == this.state[5] && this.state[3]) {\r\n            return {'winner': this.state[3], 'direction': 'H', 'row': 2};\r\n        }\r\n        if(this.state[6] == this.state[7] && this.state[6] == this.state[8] && this.state[6]) {\r\n            return {'winner': this.state[6], 'direction': 'H', 'row': 3};\r\n        }\r\n\r\n        //Checking Vertical Wins\r\n        if(this.state[0] == this.state[3] && this.state[0] == this.state[6] && this.state[0]) {\r\n            return {'winner': this.state[0], 'direction': 'V', 'row': 1};\r\n        }\r\n        if(this.state[1] == this.state[4] && this.state[1] == this.state[7] && this.state[1]) {\r\n            return {'winner': this.state[1], 'direction': 'V', 'row': 2};\r\n        }\r\n        if(this.state[2] == this.state[5] && this.state[2] == this.state[8] && this.state[2]) {\r\n            return {'winner': this.state[2], 'direction': 'V', 'row': 3};\r\n        }\r\n\r\n        //Checking Diagonal Wins\r\n        if(this.state[0] == this.state[4] && this.state[0] == this.state[8] && this.state[0]) {\r\n            return {'winner': this.state[0], 'direction': 'D', 'row': 1};\r\n        }\r\n        if(this.state[2] == this.state[4] && this.state[2] == this.state[6] && this.state[2]) {\r\n            return {'winner': this.state[2], 'direction': 'D', 'row': 2};\r\n        }\r\n\r\n        //If no winner but the board is full, then it's a draw\r\n        if(this.isFull()) {\r\n            return {'winner': 'draw'};\r\n        }\r\n        \r\n        //return false otherwise\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default Board;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Board.js","import Board from './Board';\r\n\r\n/**\r\n  * @desc This class represents the computer player, contains a single method that uses minimax to get the best move\r\n  * @param {Number} max_depth - limits the depth of searching\r\n  * @param {Map} nodes_map - stores the heuristic values for each possible move\r\n*/\r\nclass Player {\r\n\tconstructor(max_depth = -1) {\r\n        this.max_depth = max_depth;\r\n        this.nodes_map = new Map();\r\n    }\r\n    /**\r\n     * Uses minimax algorithm to get the best move\r\n     * @param {Object} board - an instant of the board class\r\n     * @param {Boolean} maximizing - whether the player is a maximizing or a minimizing player\r\n     * @param {Function} callback - a function to run after the best move calculation is done\r\n     * @param {Number} depth - used internally in the function to increment the depth each recursive call\r\n     * @return {Number} the index of the best move\r\n     */\r\n\tgetBestMove(board, alpha, beta, maximizing = true, callback = () => {}, depth = 0) {\r\n\t\t//Throw an error if the first argument is not a board\r\n\t\tif(board.constructor.name !== \"Board\") throw('The first argument to the getBestMove method should be an instance of Board class.');\r\n\t\t//Decides whether to log each tree iteration to the console\r\n\t\tconst TRACE = window.trace_ttt;\r\n\t\t//clear nodes_map if the function is called for a new move\r\n\t\tif(depth == 0) this.nodes_map.clear();\r\n\r\n\t\t//If the board state is a terminal one, return the heuristic value\r\n\t\tif(board.isTerminal() || depth == this.max_depth ) {\r\n\t\t\tif(board.isTerminal().winner == 'x') {\r\n\t\t\t\treturn 100 - depth;\r\n\t\t\t} else if (board.isTerminal().winner == 'o') {\r\n\t\t\t\treturn -100 + depth;\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t//Defining some styles for console logging\r\n\t\tconst console_styles = {\r\n\t\t\tturn_and_available_moves: 'background: #7f3192; color: #fff; font-size:14px;padding: 0 5px;',\r\n\t\t\texploring_parent: 'background: #353535;color: #fff;padding: 0 5px;font-size:18px',\r\n\t\t\texploring_child: 'background: #f03;color: #fff;padding: 0 5px',\r\n\t\t\tparent_heuristic: 'background: #26d47c; color: #fff; font-size:14px;padding: 0 5px;',\r\n\t\t\tchild_heuristic: 'background: #5f9ead; color: #fff; font-size:14px;padding: 0 5px;',\r\n\t\t\tall_moves: 'background: #e27a50;color: #fff;padding: 0 5px;font-size:14px',\r\n\t\t\tbest_move: 'background: #e8602a;color: #fff;padding: 0 5px;font-size:18px'\r\n\t\t};\r\n\t\t//Destructuring Styles\r\n\t\tconst {turn_and_available_moves, exploring_parent, exploring_child, child_heuristic, parent_heuristic, all_moves, best_move} = console_styles;\r\n\r\n\t\t//Console Tracing Code\r\n\t\tif(TRACE) {\r\n\t\t\tlet p = maximizing ? 'Maximizing' : 'Minimizing';\r\n\t\t\tconsole.log(`%c${p} player's turn Depth: ${depth}`, turn_and_available_moves);\r\n\t\t\tconsole.log(`%cAvailable Moves: ${board.getAvailableMoves().join(' ')}`, turn_and_available_moves);\r\n\t\t\tif(depth == 0) board.printFormattedBoard();\r\n\t\t}\r\n\r\n\t\t//Current player is maximizing\r\n\t\tif(maximizing) {\r\n\t\t\t//Initializ best to the lowest possible value\r\n\t\t\tlet best = -100;\r\n\t\t\t//Loop through all empty cells\r\n\t\t\tvar avail = board.getAvailableMoves();\r\n\t\t\tvar loopvar1;\r\n\t\t\tfor (loopvar1 = 0; loopvar1 < avail.length; loopvar1++)\r\n\t\t\t{\r\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\r\n\t\t\t\tlet child = new Board(board.state.slice());\r\n\t\t\t\t//Create a child node by inserting the maximizing symbol x into the current emoty cell\r\n\t\t\t\tchild.insert('x', avail[loopvar1]);\r\n\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tlet styles = (depth == 0) ? exploring_parent : exploring_child;\r\n\t\t\t\t\tconsole.log(`%cExploring move ${ avail[loopvar1] }`, styles);\r\n\t\t\t\t\tchild.printFormattedBoard();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Recursively calling getBestMove this time with the new board and minimizing turn and incrementing the depth\r\n\t\t\t\tlet node_value = this.getBestMove(child, alpha, beta, false, callback, depth + 1);\r\n\t\t\t\t//Updating best value\r\n\t\t\t\tbest = Math.max(best, node_value);\r\n\t\t\t\talpha = Math.max(alpha, best);\r\n\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t\tconsole.log(`%cMove ${avail[loopvar1]} yielded a heuristic value of ${node_value}`, parent_heuristic);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(`%cChild move ${avail[loopvar1]} yielded a heuristic value of ${node_value}`, child_heuristic);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\r\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? `${this.nodes_map.get(node_value)},${avail[loopvar1]}` : avail[loopvar1];\r\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(alpha >= beta)\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n\t\t\tif(depth == 0) {\r\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\r\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\r\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\r\n\t\t\t\t\tvar ret = arr[rand];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tret = this.nodes_map.get(best);\r\n\t\t\t\t}\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tthis.nodes_map.forEach((index, value) => {\r\n\t\t\t\t\t\tconsole.log(`%cMove(s) ${index} yielded ${value}`, all_moves);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconsole.log(`%cMove ${ret} was decided as the best move`, best_move);\r\n\t\t\t\t}\r\n\t\t\t\t//run a callback after calculation and return the index\r\n\t\t\t\tcallback(ret);\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\r\n\t\t\treturn best;\r\n\t\t}\r\n\r\n\t\tif(!maximizing) {\r\n\t\t\t//Initializ best to the highest possible value\r\n\t\t\tlet best = 100;\r\n\t\t\t//Loop through all empty cells\r\n\t\t\tvar avail2 = board.getAvailableMoves();\r\n\t\t\tvar loopvar2;\r\n\t\t\tfor (loopvar2 = 0; loopvar2 < avail2.length; loopvar2++)\r\n\t\t\t{\r\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\r\n\t\t\t\tlet child = new Board(board.state.slice());\r\n\t\t\t\t//Create a child node by inserting the minimizing symbol o into the current emoty cell\r\n\t\t\t\tchild.insert('o', avail2[loopvar2]);\r\n\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tlet styles = (depth == 0) ? exploring_parent : exploring_child;\r\n\t\t\t\t\tconsole.log(`%cExploring move ${avail2[loopvar2]}`, styles);\r\n\t\t\t\t\tchild.printFormattedBoard();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Recursively calling getBestMove this time with the new board and maximizing turn and incrementing the depth\r\n\t\t\t\tlet node_value = this.getBestMove(child, alpha, beta, true, callback, depth + 1);\r\n\t\t\t\t//Updating best value\r\n\t\t\t\tbest = Math.min(best, node_value);\r\n\t\t\t\tbeta = Math.min(best, beta);\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t\tconsole.log(`%cMove ${avail2[loopvar2]} yielded a heuristic value of ${node_value}`, parent_heuristic);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(`%cChild move ${avail2[loopvar2]} yielded a heuristic value of ${node_value}`, child_heuristic);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\r\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? this.nodes_map.get(node_value) + ',' + avail2[loopvar2] : avail2[loopvar2];\r\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n\t\t\tif(depth == 0) {\r\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\r\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\r\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\r\n\t\t\t\t\tvar ret = arr[rand];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tret = this.nodes_map.get(best);\r\n\t\t\t\t}\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tthis.nodes_map.forEach((index, value) => {\r\n\t\t\t\t\t\tconsole.log(`%cMove(s) ${index} yielded ${value}`, all_moves);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconsole.log(`%cMove ${ret} was decided as the best move`, best_move);\r\n\t\t\t\t}\r\n\t\t\t\t//run a callback after calculation and return the index\r\n\t\t\t\tcallback(ret);\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\r\n\t\t\treturn best;\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\nexport default Player;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Player.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/style.scss\n// module id = 2\n// module chunks = 0","import Board from './classes/Board';\r\nimport Player from './classes/Player';\r\nimport './style.scss';\r\n\r\n//Helpers (from http://jaketrent.com/post/addremove-classes-raw-javascript/)\r\n\r\n//checks if it has class X or O\r\nfunction hasClass(el, className) {\r\n  if (el.classList)\r\n    return el.classList.contains(className);\r\n  else\r\n    return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\r\n}\r\n\r\n//adds X or O\r\nfunction addClass(el, className) {\r\n  if (el.classList)\r\n    el.classList.add(className);\r\n  else if (!hasClass(el, className)) el.className += \" \" + className;\r\n}\r\n\r\n//removes X or O\r\nfunction removeClass(el, className) {\r\n  if (el.classList)\r\n    el.classList.remove(className);\r\n  else if (hasClass(el, className)) {\r\n    var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n    el.className=el.className.replace(reg, ' ');\r\n  }\r\n}\r\n\r\n/*\r\nHelper function that takes the object returned from isTerminal() and adds a\r\nclass to the board that will handle drawing the winning line's animation\r\n*/\r\nfunction drawWinningLine({ direction, row }) {\r\n\tlet board = document.getElementById(\"board\");\r\n\tboard.className = `${direction}${row}`;\r\n\tsetTimeout(() => { board.className += ' full'; }, 50);\r\n}\r\n\r\n\r\n//Starts a new game with a certain depth and a starting_player of 1 if human is going to start\r\nfunction newGame(depth = -1, starting_player = 1)\r\n{\r\n\t//Instantiating a new player and an empty board\r\n\tlet p = new Player(parseInt(depth));\r\n\tlet b = new Board(['','','','','','','','','']);\r\n\r\n\t//Clearing all #Board classes and populating cells HTML\r\n\tlet board = document.getElementById(\"board\");\r\n\tboard.className = '';\r\n\tboard.innerHTML = '<div class=\"cell-0\"></div><div class=\"cell-1\"></div><div class=\"cell-2\"></div><div class=\"cell-3\"></div><div class=\"cell-4\"></div><div class=\"cell-5\"></div><div class=\"cell-6\"></div><div class=\"cell-7\"></div><div class=\"cell-8\"></div>';\r\n\r\n\t//Clearing all celebrations classes\r\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_human');\r\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_robot');\r\n\r\n\t//Storing HTML cells in an array\r\n\tlet html_cells = [...board.children];\r\n\r\n\t//Initializing some variables for internal use\r\n\tlet starting = parseInt(starting_player),\r\n\t\tmaximizing = starting,\r\n\t\tplayer_turn = starting;\r\n\r\n\t//If computer is going to start, choose the center\r\n\tif(!starting) {\r\n    let symbol = !maximizing ? 'x' : 'o';\r\n\t\tb.insert(symbol, 4);\r\n\t\taddClass(html_cells[4], symbol);\r\n\t\tplayer_turn = 1; //Switch turns\r\n\t}\r\n\r\n\t//Adding Click event listener for each cell\r\n  \tb.state.forEach((cell, index) =>\r\n  \t{\r\n  \t\thtml_cells[index].addEventListener('click', () => {\r\n\r\n  \t\t\t//If cell is already occupied or the board is in a terminal state or it's not humans turn, return false\r\n\r\n  \t\t\tif(hasClass(html_cells[index], 'x') || hasClass(html_cells[index], 'o') || b.isTerminal() || !player_turn) return false;\r\n\r\n  \t\t\tlet symbol = maximizing ? 'x' : 'o'; //Maximizing player is always 'x'\r\n\r\n  \t\t\t//Update the Board class instance as well as the Board UI\r\n\r\n  \t\t\tb.insert(symbol, index);\r\n  \t\t\taddClass(html_cells[index], symbol);\r\n\r\n  \t\t\t//If it's a terminal move and it's not a draw, then human won\r\n\r\n  \t\t\tif(b.isTerminal())\r\n  \t\t\t{\r\n  \t\t\t\tlet { winner } = b.isTerminal();\r\n\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_human');\r\n  \t\t\t\tdrawWinningLine(b.isTerminal());\r\n  \t\t\t}\r\n\r\n  \t\t\tplayer_turn = 0; //Switch turns\r\n\r\n  \t\t\t//Get computer's best move and update the UI\r\n\r\n  \t\t\tp.getBestMove(b, -100, 100, !maximizing, best => {\r\n  \t\t\t\tlet symbol = !maximizing ? 'x' : 'o';\r\n  \t\t\t\tb.insert(symbol, best);\r\n  \t\t\t\taddClass(html_cells[best], symbol);\r\n  \t\t\t\tif(b.isTerminal())\r\n  \t\t\t\t{\r\n\t  \t\t\t\tlet { winner } = b.isTerminal();\r\n\t\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_robot');\r\n\t  \t\t\t\tdrawWinningLine(b.isTerminal());\r\n\t  \t\t\t}\r\n\r\n  \t\t\t\tplayer_turn = 1; //Switch turns\r\n  \t\t\t});\r\n  \t\t}, false);\r\n  \t\tif(cell) addClass(html_cells[index], cell);\r\n  \t});\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", event => {\r\n\r\n\t//Start a new game when page loads with default values\r\n\r\n\tlet depth = -1;\r\n\tlet starting_player = 1;\r\n\tnewGame(depth, starting_player);\r\n\r\n\r\n\t//Events handlers for depth, starting player options\r\n\r\n\tdocument.getElementById(\"depth\").addEventListener(\"click\", (event) => {\r\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\r\n\t\tlet depth_choices = [...document.getElementById(\"depth\").children[0].children];\r\n\t\tdepth_choices.forEach((choice) => {\r\n\t\t\tremoveClass(choice, 'active');\r\n\t\t});\r\n\t\taddClass(event.target, 'active');\r\n\t\tdepth = event.target.dataset.value;\r\n\t}, false);\r\n\r\n\tdocument.getElementById(\"starting_player\").addEventListener(\"click\", (event) => {\r\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\r\n\t\tlet starting_player_choices = [...document.getElementById(\"starting_player\").children[0].children];\r\n\t\tstarting_player_choices.forEach((choice) => {\r\n\t\t\tremoveClass(choice, 'active');\r\n\t\t});\r\n\t\taddClass(event.target, 'active');\r\n\t\tstarting_player = event.target.dataset.value;\r\n\t}, false);\r\n\r\n\tdocument.getElementById(\"newgame\").addEventListener('click', () => {\r\n\t\tnewGame(depth, starting_player);\r\n\t});\r\n\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}